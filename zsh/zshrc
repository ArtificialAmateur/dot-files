# Opens tmux properly:
if command -v tmux >/dev/null; then
  [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux attach
fi

## ZSH Modules {{{

# Loads listed modules:
autoload -Uz compinit promptinit vcs_info color && compinit -i

## }}}

## Options {{{

# Auto-corrects commands:
setopt correctall

# Prevents command duplicates from being recorded in history:
setopt hist_ignore_all_dups

# Prevents commands from being recorded if preceeded with a space:
setopt hist_ignore_space

# Shares the same history with all shells:
setopt sharehistory

# Expands globbing operator and list all matches found:
setopt extendedglob

# Appends history
setopt append_history

# Save timestamp
setopt extended_history

# Add history immediately after command
setopt inc_append_history

## }}}

## Prompt {{{

# Activates prompt:
promptinit

# Workaround for handling TERM variable in multiple tmux sessions properly:
if [[ -n ${TMUX} && -n ${commands[tmux]} ]];then
        case $(tmux showenv TERM 2>/dev/null) in
                *256color) ;&
                TERM=fbterm)
                        TERM=screen-256color ;;
                *)
                        TERM=screen
        esac
fi

## }}}

## History {{{

# Sets history size:
export HISTSIZE=2000

# Saves history:
export SAVEHIST=$HISTSIZE

# Sets history file directory:
export HISTFILE=~/.zsh/zhistory/zhist-$(date +'%Y-%m-%d')

## }}}

## Variables {{{

# Sets default editor to neovim:
export EDITOR=/usr/bin/nvim

# Fixes "command not found" for root permission programs:
export PATH=/sbin:/usr/sbin:$PATH

# Displays location of local scripts:
export PATH=$PATH:~/bin:~/.local/bin

# Set Python environment

# Set Rust environment
export PATH=$HOME/.cargo/bin:$PATH

# Set Go environment
export PATH=$PATH:/usr/local/go/bin
export PATH=$HOME/go/bin:$PATH

# Sets JDK environments
#export JDK_HOME=/usr/lib/jvm/java-11-openjdk-amd64
#export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# Set Nim environment
export PATH=$HOME/.nimble/bin:$PATH

# Set Node Version Manager environment
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

## }}}



## Aliases {{{

# Objdump use intel syntax
alias objdump="objdump -M intel"

# Stops GDB from showing version info at start-up
alias gdb="gdb -q"

# Remind me to use keyboard shortcuts instead:
alias clear="echo 'Use ^L!'"

# Incase you forget to type sudo:
alias fuck='sudo $(fc -ln -1)'

# Improves 'ls' commands:
alias ls="ls --color=auto"
alias ll="ls -lht"
alias la="ls -a"
alias lla="ll -a"

# Runs wgetpaste with dpaste:
alias dpaste="wgetpaste -s dpaste"

# Runs screenshot in interactive mode:
alias gnome-screenshot="gnome-screenshot --interactive"

## Causes issues with spaceship prompt:
# ISO 8601:
#alias date="date -I'seconds' | sed -e 's/T/ /g'"

# Points to docker-compose yaml file
alias dcp='docker-compose'

# Switches vim to nvim
alias vim="nvim"

# Fixes editor scrolling issues within tmux
alias vim="TERM=xterm-color vim"
alias nano="TERM=xterm-color nano"
alias ssh="TERM=xterm-color ssh"

# Start emacs in terminal by default:
alias emacs="emacs -nw"

## }}}

## Completions {{{

# Activates completions:
compinit -d ~/var/cache/zsh

# Enables completions cache:
zstyle ':completion::complete:*' use-cache 1

# Sets completions format:
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'

# Gives error if no matches appear:
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

## }}}

## Syntax Highlighting {{{

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main cursor)
typeset -gA ZSH_HIGHLIGHT_STYLES
# Comments
ZSH_HIGHLIGHT_STYLES[comment]='fg=#6272A4'
# Functions/methods
ZSH_HIGHLIGHT_STYLES[alias]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[global-alias]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[function]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[command]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[precommand]='fg=#50FA7B,italic'
ZSH_HIGHLIGHT_STYLES[autodirectory]='fg=#FFB86C,italic'
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=#FFB86C'
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=#FFB86C'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]='fg=#BD93F9'
# Built ins
ZSH_HIGHLIGHT_STYLES[builtin]='fg=#8BE9FD'
ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=#8BE9FD'
ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=#8BE9FD'
# Punctuation
ZSH_HIGHLIGHT_STYLES[commandseparator]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter-unquoted]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]='fg=#FF79C6'
# Strings
ZSH_HIGHLIGHT_STYLES[command-substitution-quoted]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter-quoted]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[rc-quote]='fg=#F1FA8C'
# Variables
ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[assign]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[named-fd]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[numeric-fd]='fg=#F8F8F2'
# No category relevant in spec
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[path]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[path_pathseparator]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[path_prefix]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[globbing]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=#BD93F9'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[redirection]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[arg0]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[default]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[cursor]='standout'
## }}}

## Functions {{{

# Update debian
function update-all {
	update-apt
	update-flatpak
	update-fw
}

function update-apt {
	sudo apt update
	sudo apt full-upgrade
	sudo apt autopurge
	sudo apt autoclean
}

function update-fw {
	sudo fwupdmgr refresh
	sudo fwupdmgr update
}

function update-flatpak {
	flatpak update
}

# Displays a list of supported colors:
function lscolors {
	((cols = $COLUMNS - 4))
	s=$(printf %${cols}s)
	for i in {000..$(tput colors)}; do
		echo -e $i $(tput setaf $i; tput setab $i)${s// /=}$(tput op);
	done
}

# Launches a program:
function launch {
	type $1 >/dev/null || { print "$1 not found" && return 1 }
	$@ &>/dev/null &|
}

# Gets public ip address:
function myip {
	local api
	case "$1" in
		"-4")
			api="http://v4.ipv6-test.com/api/myip.php"
			;;
		"-6")
			api="http://v6.ipv6-test.com/api/myip.php"
			;;
		*)
			api="http://ipv6-test.com/api/myip.php"
			;;
	esac
	curl -s "$api"
	echo # Newline.
}

## }}}

## Zplug {{{

source ~/.zplug/init.zsh

# Add syntax highlighting
zplug "zsh-users/zsh-syntax-highlighting", defer:2

# Add fish-like completions
zplug "zsh-users/zsh-completions"

# Add fish-like autosuggestions
zplug "zsh-users/zsh-autosuggestions"

# Add fish-like history search
zplug "zsh-users/zsh-history-substring-search"

# Add spaceship theme
zplug "spaceship-prompt/spaceship-prompt", use:spaceship.zsh, from:github, as:theme

# Can manage local plugins
zplug "~/.zsh", from:local

# Self-manage
zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load 

## }}}
